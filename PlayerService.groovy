import org.synote.player.client.MultimediaDataimport org.synote.player.client.MultimediaDataimport org.synote.player.client.MultimediaDataimport org.synote.player.client.PlayerExceptionimport org.synote.player.client.PresentationDataimport org.synote.player.client.PresentationDataimport org.synote.player.client.PresentationDataimport org.synote.player.client.PresentationSlideDataimport org.synote.player.client.ClientProfileEntryimport org.synote.player.client.SynmarkDataimport org.synote.player.client.TranscriptDataimport org.synote.player.client.TranscriptDataSimpleimport org.synote.player.client.TranscriptItemDataimport org.synote.player.client.TranscriptSynpointimport org.synote.player.client.UserData///////////////////////////////////////////////////////////////////////////import org.synote.player.client.ConceptMap//import org.synote.player.client.ConceptMapData//import org.synote.player.client.StudentEvaluationDataclass PlayerService{	static expose = ['gwt:org.synote.player.client']	boolean transactional = true	def securityService	def permService	def transcriptContent = [:]	int[] storeProfileEntries(List<ClientProfileEntry> clientEntries)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, storeProfileEntries, line no.36"				def stored = []		def user = securityService.getLoggedUser()		if (!user)			return stored		def defaultProfile = UserProfile.findByOwnerAndDefaultProfile(user, true)		if (!defaultProfile)		{			defaultProfile = new UserProfile(owner: user, name: 'Default', defaultProfile: true)			if (!defaultProfile.save())				return stored		}		clientEntries.each {clientEntry ->			def resource = clientEntry.getResourceId() ? Resource.get(clientEntry.getResourceId().toLong()) : null			def entry = null			if (resource)			{				entry = ProfileEntry.withCriteria(uniqueResult: true) {					eq('profile', defaultProfile)					eq('resource', resource)					eq('name', clientEntry.getName())				}			}			else			{				entry = ProfileEntry.withCriteria(uniqueResult: true) {					eq('profile', defaultProfile)					isNull('resource')					eq('name', clientEntry.getName())				}			}			if (entry)			{				if (clientEntry.getValue())					entry.value = clientEntry.getValue()				else					entry.delete()			}			else			{				if (clientEntry.getValue())				{					defaultProfile.addToEntries(new ProfileEntry						( profile: defaultProfile						, resource: resource						, name: clientEntry.getName()						, value: clientEntry.getValue() ))					if (!defaultProfile.save())						return stored				}			}			stored += clientEntry.getVersion()		}		return stored	}	MultimediaData getMultimedia(String multimediaId)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, getMultimedia, line no.107"				def multimedia = MultimediaResource.get(multimediaId.toLong())		if (!multimedia || !canRead(multimedia))			return null		return new MultimediaData			( multimedia.id.toString()			, getOwner(multimedia)			, canEdit(multimedia)			, canDelete(multimedia)			, multimedia.title			, multimedia.url			, canCreateTranscript(multimedia)			, canCreatePresentation(multimedia)			, canCreateSynmark(multimedia) )	}	TranscriptData[] getTranscripts(String multimediaId)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, getTranscripts, line no.128"				def multimedia = MultimediaResource.get(multimediaId.toLong())		def annotations = ResourceAnnotation.findAllByTarget(multimedia)		def transcripts = []		annotations.each {annotation ->			if (annotation.source instanceof TranscriptResource && canRead(annotation))			{				def transcript = annotation.source				def synpoints =[]				annotation.synpoints.sort{synpoint -> synpoint.sourceStart}.each{synpoint->					synpoints << new TranscriptSynpoint							(synpoint.sourceStart,							synpoint.sourceEnd,							synpoint.targetStart,							synpoint.targetEnd)				}				transcripts << new TranscriptData					( transcript.id.toString()					, getOwner(transcript)					, canEdit(transcript)					, canDelete(transcript)					, transcript.content					, synpoints)			}		}		return transcripts	}	TranscriptData[] createTranscript(String multimediaId, TranscriptData transcriptData)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, createTranscript, line no.165"				def multimedia = MultimediaResource.get(multimediaId.toLong())		//The owner of the transcript should be the same as the owner of multimedia		//def user = securityService.getLoggedUser()		def user = securityService.getLoggedUser()		if (!user)			throw new PlayerException("User login required");		def owner = multimedia.owner		//println "Create Transcript:"+multimedia.owner		def transcript = new TranscriptResource(				content: transcriptData.getText(),				owner: owner,				title: "Transcript")		//Do we have to check the user permission here?		if (!transcript.save())		{			throw new ViascribeException("Cannot create transcript resource")		}		//create new annotation		def annotation = new ResourceAnnotation(owner: owner, source: transcript, target: multimedia)		def transcripts = []		def items = []		transcriptData.getSynpoints().each {tsp ->			if (tsp.getId() == null)			{				def sourceStart = tsp.getStartIndex()				def sourceEnd = tsp.getEndIndex()				def targetStart = tsp.getStartTime()				def targetEnd = tsp.getEndTime()				annotation.addToSynpoints(new Synpoint(sourceStart: sourceStart,						sourceEnd: sourceEnd,						targetStart: targetStart,						targetEnd: targetEnd))			}		}		if (!annotation.save())		{			throw new ViascribeException("Cannot create transcript annotation")		}		//This is not good, coz we return an unchanged parameter		transcripts << transcriptData		return transcripts	}	TranscriptData[] editTranscript(String multimediaId, String transcriptId, TranscriptData transcriptData)	{		def user = securityService.getLoggedUser()		if (!user)			throw new PlayerException("User login required");		def multimedia = MultimediaResource.get(multimediaId.toLong())		def transcript = TranscriptResource.get(transcriptId.toLong())		def transcripts = []		def items = []		transcript.content = transcriptData.getText()		if (!transcript.save(flush:true))		{			def message = "Cannot save transcript resource with ID ${transcript.id}:"			transcript.errors.each {error ->				message += "\n${error}"			}			throw new PlayerException(message)		}		def annotation = ResourceAnnotation.findBySourceAndTarget(transcript, multimedia)		def synpoints = Synpoint.findAllByAnnotation(annotation)		synpoints.each		{			synpoint ->annotation.removeFromSynpoints(synpoint)		}		synpoints*.delete()		//remove all of synpoint for this annotation first and then add in all of them		transcriptData.getSynpoints().each {tsp ->			if (tsp.getId() == null)			{				def newsynpoint = new Synpoint						( annotation: annotation						, sourceStart: tsp.getStartIndex()						, sourceEnd: tsp.getEndIndex()						, targetStart: tsp.getStartTime()						, targetEnd: tsp.getEndTime() )				if(!newsynpoint.save())				{					def message = "Cannot save new synpoint with startIndex: ${tsp.getStartIndex()}:"					newsynpoint.errors.each {error ->							message += "\n${error}"						}					throw new PlayerException(message)				}				annotation.addToSynpoints(newsynpoint)			}		}		if (!annotation.save(flush:true))		{			def message = "Cannot save transcript annotation with ID ${annotation.id}:"			annotation.errors.each {error ->				message += "\n${error}"			}			throw new PlayerException(message)		}		//This is not good, coz we return an unchanged parameter		//transcripts << transcriptData		return getTranscripts(multimediaId)	}	TranscriptData[] deleteTranscript(String multimediaId, String transcriptId)	{		// TODO IMPLEMENT		return getTranscrips(multimediaId)	}	String getTranscriptFromFile()	{		def content = transcriptContent.get(securityService.getLoggedUser())		if(content != null)		{			if(!content.trim().equals(""))			{				println "return content"				return content			}			else			{				println "return empty"				return " "			}		}		else		{			println "return null"			return null		}	}	PresentationData[] getPresentations(String multimediaId)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, getPresentations, line no.323"				def multimedia = MultimediaResource.get(multimediaId.toLong())		def annotations = ResourceAnnotation.findAllByTarget(multimedia)		def presentations = []		annotations.each {annotation ->			if (annotation.source instanceof PresentationResource && canRead(annotation))			{				def presentation = annotation.source				def slides = []				annotation.source.slides.sort {slide -> slide.index}.each {slide ->					def synpoint = annotation.synpoints.find {synpoint -> synpoint.sourceStart == slide.index}					slides << new PresentationSlideData(slide.id.toString(), synpoint?.targetStart, slide.url)				}				//canEdit and canDelete should pass presentation as the param				//But as currently, presentations have no permission defined at all				//We use multimedia instead				presentations << new PresentationData					( presentation.id.toString()					, getOwner(presentation)					, canEdit(multimedia)					, canDelete(multimedia)					, (PresentationSlideData[]) slides )			}		}		return presentations	}	PresentationData[] createSlide(String multimediaId, String presentationId, int index, PresentationSlideData slideData)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, createSlide, line no.359"				def user = securityService.getLoggedUser()		if (!user)			throw new PlayerException("User login required");		def multimedia = MultimediaResource.get(multimediaId.toLong())		if (!multimedia)			throw new PlayerException("Multimedia with ID ${multimediaId} not found")		def owner = multimedia.owner		def presentation = null		def annotation = null		if (presentationId)		{			presentation = PresentationResource.get(presentationId.toLong())			if (!presentation)				throw new PlayerException("Presentation with ID ${presentationId} not found")			// check permissions			if (index < 0)				index = 0			if (index > presentation.slides.size())				index = presentation.slides.size()			presentation.slides.each {slide ->				if (slide.index >= index)					slide.index++			}			annotation = ResourceAnnotation.findBySourceAndTarget(presentation, multimedia)			if (!annotation)				throw new PlayerException("Annotation for multimedia with ID ${multimedia.id} and presentation with ID ${presentation.id} not found")			annotation.synpoints.each {synpoint ->				if (synpoint.sourceStart >= index)					synpoint.sourceStart++			}		}		else		{			// check permissions			presentation = new PresentationResource(owner: owner)			annotation = new ResourceAnnotation(owner: owner, source: presentation, target: multimedia)			index = 0		}		presentation.addToSlides(new PresentationSlide(presentation: presentation, index: index, url: slideData.getUrl()));		if (!presentation.save())		{			def message = "Cannot save presentation resource with ID ${presentation.id}:"			presentation.errors.each {error ->				message += "\n${error}"			}			throw new PlayerException(message)		}		annotation.addToSynpoints(new Synpoint(annotation: annotation, sourceStart: index, targetStart: slideData.getStart()))		if (!annotation.save())		{			def message = "Cannot save presentation annotation with ID ${annotation.id}:"			annotation.errors.each {error ->				message += "\n${error}"			}			throw new PlayerException(message)		}		return getPresentations(multimediaId)	}	PresentationData[] editSlide(String multimediaId, String presentationId, int index, int newIndex, PresentationSlideData slideData)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, editSlide, line no.443"				def user = securityService.getLoggedUser()		if (!user)			throw new PlayerException("User login required");		def multimedia = MultimediaResource.get(multimediaId.toLong())		if (!multimedia)			throw new PlayerException("Multimedia with ID ${multimediaId} not found")		def presentation = PresentationResource.get(presentationId.toLong())		if (!presentation)			throw new PlayerException("Presentation with ID ${presentationId} not found")		// check permissions		def slide = PresentationSlide.findByPresentationAndIndex(presentation, index)		if (!slide)			throw new PlayerException("Slide with index ${index} in presentation with ID ${presentation.id} not found")		slide.url = slideData.getUrl()		if (!slide.save())		{			def message = "Cannot update slide with index ${slide.index} in presentation with ID ${presentation.id}:"			slide.errors.each {error ->				message += "\n${error}"			}			throw new PlayerException(message)		}		def annotation = ResourceAnnotation.findBySourceAndTarget(presentation, multimedia)		if (!annotation)			throw new PlayerException("Annotation for multimedia with ID ${multimedia.id} and presentation with ID ${presentation.id} not found")		def synpoint = annotation.synpoints.find {it.sourceStart == index}		if (synpoint)		{			synpoint.targetStart = slideData.getStart()			if (!synpoint.save())			{				def message = "Cannot update synpoint for slide with index ${slide.index} in presentation with ID ${presentation.id}:"				synpoint.errors.each {error ->					message += "\n${error}"				}				throw new PlayerException(message)			}		}		if (newIndex < 0)			newIndex = 0		if (newIndex > presentation.slides.size() - 1)			newIndex = presentation.slides.size() - 1		if (index != newIndex)		{			presentation.slides.each {				if (it.index > index)					it.index--				if (it.index >= newIndex)					it.index++			}			slide.index = newIndex			annotation.synpoints.each {				if (it.sourceStart > index)					it.sourceStart--				if (it.sourceStart >= newIndex)					it.sourceStart++			}			if (synpoint)				synpoint.sourceStart = newIndex		}		return getPresentations(multimediaId)	}	PresentationData[] deleteSlide(String multimediaId, String presentationId, int index)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, deleteSlide, line no.533"				def user = securityService.getLoggedUser()		if (!user)			throw new PlayerException("User login required");		def multimedia = MultimediaResource.get(multimediaId.toLong())		if (!multimedia)			throw new PlayerException("Multimedia with ID ${multimediaId} not found")		def presentation = PresentationResource.get(presentationId.toLong())		if (!presentation)			throw new PlayerException("Presentation with ID ${presentationId} not found")		// check permissions		def slide = PresentationSlide.findByPresentationAndIndex(presentation, index)		if (!slide)			throw new PlayerException("Slide with index ${index} in presentation with ID ${presentation.id} not found")		if (PresentationSlide.countByPresentation(presentation) > 1)		{			presentation.removeFromSlides(slide)			slide.delete()			presentation.slides.each {				if (it.index > index)					it.index--			}			if (!presentation.save())			{				def message = "Cannot update presentation with ID ${presentation.id}:"				presentation.errors.each {error ->					message += "\n${error}"				}				throw new PlayerException(message)			}			def annotation = ResourceAnnotation.findBySourceAndTarget(presentation, multimedia)			if (!annotation)				throw new PlayerException("Annotation for multimedia with ID ${multimedia.id} and presentation with ID ${presentation.id} not found")			def synpoint = annotation.synpoints.find {it.sourceStart == index}			if (synpoint)			{				annotation.removeFromSynpoints(synpoint)				synpoint.delete()			}			annotation.synpoints.each {				if (it.sourceStart > index)					it.sourceStart--			}			if (!annotation.save())			{				def message = "Cannot update presentation annotation with ID ${annotation.id}:"				annotation.errors.each {error ->					message += "\n${error}"				}				throw new PlayerException(message)			}		}		else		{			presentation.delete()		}		return getPresentations(multimediaId)	}	SynmarkData[] getSynmarks(String multimediaId)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, getSynmarks, line no.612"				def multimedia = MultimediaResource.get(multimediaId.toLong())		def annotations = ResourceAnnotation.findAllByTarget(multimedia)		def synmarks = []		annotations.each {annotation ->			if (annotation.source instanceof SynmarkResource && canRead(annotation.source))				synmarks << createSynmarkData(annotation)		}		return synmarks.sort {synmark -> synmark.getStart()}	}	private SynmarkData createSynmarkData(ResourceAnnotation annotation)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, createSynmarkData, line no.630DAMMIT5"				def synmark = annotation.source				println	"FLAG IS:"		println synmark.flag		////////////////////////////////////////////////////////////		return new SynmarkData			( synmark.id.toString()			, getOwner(synmark)			, canEdit(synmark)			, canDelete(synmark)			, annotation.synpoints.targetStart[0]			, annotation.synpoints.targetEnd[0]			, synmark.title			, synmark.note.content			, synmark.tags ? (String[]) synmark.tags.sort {tag -> tag.content}.collect {tag -> tag.content} : new String[0]			, synmark.next ? synmark.next.id.toString() : null 			, synmark.flag)	}	SynmarkData createSynmark(String multimediaId, SynmarkData synmarkData)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, createSynmark, line no.650"				def user = securityService.getLoggedUser()		// check premissions		//////////////////////////////////////ADDED FLAG BELOW		//, flag: synmarkData.getFlag()?.trim() ? synmarkData.getFlag().trim() : null		def synmark = new SynmarkResource			( owner: user			, title: synmarkData.getTitle()?.trim() ? synmarkData.getTitle().trim() : null			, note: new SynmarkTextNote(owner: user, content: synmarkData.getNote()?.trim() ? synmarkData.getNote().trim() : null)			, next: synmarkData.getNext()?.trim() ? SynmarkResource.get(synmarkData.getNext().trim().toLong()) : null			, flag: synmarkData.getFlag()?.trim() ? synmarkData.getFlag().trim() : null)				synmarkData.getTags().each {content ->			if (content?.trim() && !synmark?.tags.find {tag -> tag.content.equalsIgnoreCase(content.trim())})				synmark.addToTags(new SynmarkTag(owner: user, content: content.trim()))		}		if (!synmark.save())		{			synmark.errors.each {error ->				println error			}			throw new PlayerException("Cannot create synmark resource")		}		def multimedia = MultimediaResource.get(multimediaId.toLong())		def annotation = new ResourceAnnotation(owner: user, source: synmark, target: multimedia)		annotation.addToSynpoints(new Synpoint(targetStart: synmarkData.getStart(), targetEnd: synmarkData.getEnd()))		if (!annotation.save())		{			annotation.errors.each {error ->				println error			}			throw new PlayerException("Cannot create synmark annotation")		}				return createSynmarkData(annotation)	}			//////////////////////////////////////////////////////////////////////////////////////	//////////////////////////////////////////////////////////////////////////////////////	/*	StudentEvaluationData[] getStudentEvals(String multimediaId)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, getStudentEvals, line no.708"				def multimedia = MultimediaResource.get(multimediaId.toLong())		def annotations = ResourceAnnotation.findAllByTarget(multimedia)		def studentevals = []		annotations.each {annotation ->			if (annotation.source)				studentevals << createStudentEvalData(annotation)		}		return studentevals	}	private StudentEvaluationData createStudentEvalData(ResourceAnnotation annotation)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, createStudentEvalData, line no.726"				def studenteval = annotation.source		////////////////////////////////////////////////////////////		return new SynmarkData			(				studenteval.question			)	}		StudentEvaluationData createStudentEval(String multimediaId, StudentEvaluationData studentEvaluationData)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, createStudentEval, line no.740"				def user = securityService.getLoggedUser()		// check premissions		def studenteval = new SynmarkResource			( owner: user			  question: studentEvaluationData.getQuestion()?.trim() ? studentEvaluationData.getQuestion().trim() : null)		def multimedia = MultimediaResource.get(multimediaId.toLong())		def annotation = new ResourceAnnotation(owner: user, source: studenteval, target: multimedia)		return createSynmarkData(annotation)	}	*/	///////////////////////////////////////////////////////////////////////////////////////	//////////////////////////////////////////////////////////////////////	SynmarkData editSynmark(String synmarkId, SynmarkData synmarkData)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, editSynmark, line no.697"				def synmark = SynmarkResource.get(synmarkId.toLong())		if (!synmark)			throw new PlayerException("Synmark with ID ${synmarkId} not found")		// check permissions		def user = securityService.getLoggedUser()		if (synmark.owner.id != user?.id && user?.role != UserRole.ADMIN)			throw new PlayerException("Permission denied")		synmark.title = synmarkData.getTitle()?.trim() ? synmarkData.getTitle().trim() : null		synmark.note.content = synmarkData.getNote()?.trim() ? synmarkData.getNote().trim() : null		synmark.next = synmarkData.getNext()?.trim() ? SynmarkResource.get(synmarkData.getNext().trim().toLong()) : null		synmark.tags?.findAll {tag ->			!synmarkData.getTags().find {content ->				content?.trim() && content == tag.content			}		}.each {tag ->			synmark.removeFromTags(tag)			tag.delete()		}		synmarkData.getTags().findAll {content ->			content?.trim() && !synmark.tags?.find {tag ->				tag.content == content			}		}.each {content ->			if (content?.trim() && !synmark?.tags.find {tag -> tag.content.equalsIgnoreCase(content.trim())})				synmark.addToTags(new SynmarkTag(owner: synmark.owner, content: content.trim()))		}		if (!synmark.save())		{			synmark.errors.each {error ->				println error			}			throw new PlayerException("Cannot update synmark resource")		}		def annotation = ResourceAnnotation.findBySource(synmark)		def synpoint = annotation.synpoints.find {true}		synpoint.targetStart = synmarkData.getStart()		synpoint.targetEnd = synmarkData.getEnd()		if (!synpoint.save())		{			synpoint.errors.each {error ->				println error			}			throw new PlayerException("Cannot update synmark annotation")		}		return createSynmarkData(annotation)	}	String deleteSynmark(String synmarkId)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, deleteSynmark, line no.761"				def synmark = SynmarkResource.get(synmarkId.toLong())		if (!synmark)			throw new PlayerException("Synmark with ID ${synmarkId} not found")		// check permissions		def user = securityService.getLoggedUser()		if (synmark.owner.id != user?.id && user?.role != UserRole.ADMIN)			throw new PlayerException("Permission denied")		synmark.delete()		return synmarkId	}	//>=READ	private canRead(Resource resource)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, canRead, line no.784"				/*def user = securityService.getLoggedUser()		if(permService.getPerm(resource, user) >= PermissionValue.READ)		{			return true		}		else		{			return false		}*/		return true	}	//>=READ	private canRead(Annotation annotation)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, canRead, line no.803"				//TODO: haven't implementated in permService.groovy		return true	}	private getOwner(resource)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, getOwner, line no.812"				return new UserData(resource.owner.id.toString(), resource.owner.firstName, resource.owner.lastName)	}	//IS OWNER OR ADMIN, OR HAS WRITE PERMISSION	private canEdit(resource)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, canEdit, line no.821"				//There's no refactoring function in Eclipse for groovy		//So in order to avoid the ambigous function in PermService.groovy		//I have to change the programme as following:		User user= securityService.getLoggedUser()		def perm		if(user)			perm = permService.getPerm(resource, user)		else			perm = resource.perm		//println "perm CAN EDIT:"+perm.toString()+":"+resource.class+":"+resource.owner		//println "Class:"+resource.class		//println "Perm:"+perm		if(perm == PermissionValue.WRITE)		{			return true		}		else		{			//println "return false"			return false		}	}	private canDelete(resource)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, canDelete, line no.849"				//println "canDelete:"+resource.owner.id		return canEdit(resource)	}	private canCreateTranscript(multimedia)	{		///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, canCreateTranscript, line no.858"				//println "canCreateTranscript:"+canEdit(multimedia)		return canEdit(multimedia)	}	private canCreatePresentation(multimedia)	{			///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, canCreatePresentation, line no.868"				//println "canCreatePresenation:"+multimedia.owner.id		return canEdit(multimedia)	}	//IS OWNER OR ADMIN, OR HAS ANNOTATE PERMISSION	private canCreateSynmark(multimedia)	{			///////////////////////////////////////////////////////////////////		println "in PlayerService.groovy, canCreateSynmark, line no.879"		User user= securityService.getLoggedUser()		def perm		if(user)			perm = permService.getPerm(multimedia, user)		else			perm = multimedia.perm		//println "perm CREATE SYNMARK:"+perm.toString()+":"+multimedia.toString()		if(perm >= PermissionValue.ANNOTATE)		{			//println "return true"				return true		}		else		{			//println "return false"				return false		}	}}